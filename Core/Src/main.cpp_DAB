/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "Silelis_code/si468xDAB.h"
#include "Silelis_code/si468xAM.h"
#define Si4684_ADDRESS			0x64
si468xDAB* pDAB_PL;



/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//void si46xx_am_tune_freq(uint32_t khz, uint16_t antcap)
//{
//	/*uint8_t data[5];
//	//char buf[4];
//
//	//data[0] = (1<<4) | (1<<0); // force_wb, low side injection
//	//data[0] = (1<<4)| (1<<3); // force_wb, tune_mode=2
//	data[0] = 0;
//	data[1] = ((khz / 10) & 0xFF);
//	data[2] = ((khz / 10) >> 8) & 0xFF;
//	data[3] = antcap & 0xFF;
//	data[4] = 0;*/
//
//	uint8_t data[6] =
//	{
//			0x40 /*AM_TUNE_FREQ*/,
//		0,
//		  // (1 << 4) | (1 << 3);  // force_wb, tune_mode=2		lub		(1<<4) | (1<<0); // force_wb, low side injection
//		((khz) & 0xFF),
//		((khz) >> 8) & 0xFF,
//		antcap & 0xFF,
//		(antcap >> 8) & 0xFF,
//	};
//	//I2C_write(Si4684_ADDRESS, data, 6);
//}





/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI3_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  HAL_GPIO_WritePin(si468x_SPI_ENAB_GPIO_Port, si468x_SPI_ENAB_Pin, GPIO_PIN_SET);


#include "Silelis_code/SileliSMemDynamicAlocator.h"

	HAL_UART_Transmit(&huart2, (uint8_t *)"Hello World!\r\n", 14, 200);

	if (HAL_I2C_IsDeviceReady(&hi2c1, 0xA0, 1, 50) == HAL_OK)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *) "i2c: EEPROM OK\r\n", 27, 200);
	}

	//i2c constructor
	 si468xDAB DAB_PL = si468xDAB(Si468X_Reset_GPIO_Port, Si468X_Reset_Pin, &hi2c1, Si4684_ADDRESS<<1, _Si468x_MODE_DAB, (uint32_t*)&dabFreqListOnFlash_DAB, (uint8_t) sizeof(dabFreqListOnFlash_DAB));

	//spi constructio
	//si468xDAB DAB_PL = si468xDAB(Si468X_Reset_GPIO_Port, Si468X_Reset_Pin, &hspi3, si468xSpi_EN_GPIO_Port, si468xSpi_EN_Pin, _Si468x_MODE_DAB, (uint32_t*)&dabFreqListOnFlash_DAB, (uint8_t) sizeof(dabFreqListOnFlash_DAB));
	 pDAB_PL = &DAB_PL;

	 si468xPartInfo int1 = DAB_PL.getPartInfo();
	 si468xPowerUpArgs retval = DAB_PL.getPowerUpArgs();
	 si468xBootedFirmware resp_  = DAB_PL.getSystemState(); //GET_SYS_STATE


		HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n\r\n\r\n", 6, 200);
		switch(resp_)
		{
		case FMHD_active:
			HAL_UART_Transmit(&huart2, (uint8_t *) "FMHD is active\r\n", 16, 200);
			break;
		case DAB_active:
			HAL_UART_Transmit(&huart2, (uint8_t *) "DAB is active\r\n", 15, 200);
			break;
		case AMHD_active	:
			HAL_UART_Transmit(&huart2, (uint8_t *) "AMHD is active\r\n", 16, 200);
			break;
		default:
			HAL_UART_Transmit(&huart2, (uint8_t *) "Si468x ROM not booted\r\n", 23, 200);
		}
		HAL_Delay(1000);
		// BOOT Si468x

		DAB_PL.dabBandScan(37, 0, 0);
		uint16_t services = DAB_PL.dabParsedServiceListSize();
		DAB_PL.dabStartDigitalService(0, 0);


		DAB_PL.dabStopDigitalService(0, 0);
		DAB_PL.dabBandScan(37, 0, 0);


#ifdef AM_reception
		//si46xx_set_property(SI46XX_AM_VALID_RSSI_THRESHOLD, 0x0000);
		//si46xx_set_property(SI46XX_AM_VALID_SNR_THRESHOLD, 0x0000);
		//si46xx_set_property(SI46XX_AM_SOFTMUTE_SNR_LIMITS, 0x0000);
		//si46xx_set_property(SI46XX_AM_RDS_CONFIG, 0x0001);
		si46xx_set_property(0x4100, 225);
		//si46xx_set_property(SI46XX_AM_TUNE_FE_CFG, 0x0000);   // switch open
		//si46xx_am_tune_freq(1584, 0);  			// Radio AM Bia�ystok
		//si46xx_am_tune_freq(1062, 0);    		// Radio AM Zamo��
		si46xx_am_tune_freq(756, 0);        		// Radio AM Gi�ycko
		//si46xx_am_tune_freq(225, 0);    		// Polskie Radio Program 1  !!!trzeba zmieni� zakres przeszukiwania w si4689

#endif


	HAL_UART_Transmit(&huart2, (uint8_t *) "PROGRAM END\r\n", 13, 200);
	HAL_Delay(500);

  while (1)
  {




    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
1;
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
